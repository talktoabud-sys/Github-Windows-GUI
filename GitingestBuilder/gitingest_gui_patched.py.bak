#!/usr/bin/env python3
"""
Windows GUI application to digest folders using Gitingest.
Provides a simple interface for selecting folders and generating digests.
DEBUG VERSION - Logs errors to file and console
"""

import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import threading
from pathlib import Path
import sys
import traceback
from datetime import datetime

# Setup error logging
def setup_logging():
    """Setup logging to file for debugging."""
    log_file = Path("gitingest_debug.log")
    
    class Logger:
        def __init__(self, filename):
            self.terminal = sys.stdout
            self.log = open(filename, "a", encoding='utf-8')
        
        def write(self, message):
            self.terminal.write(message)
            self.log.write(message)
            self.log.flush()
        
        def flush(self):
            self.terminal.flush()
            self.log.flush()
    
    sys.stdout = Logger(log_file)
    sys.stderr = Logger(log_file)
    
    print(f"\n{'='*60}")
    print(f"GitingestDigester Debug Log - {datetime.now()}")
    print(f"{'='*60}\n")


def run_ingest(folder_path, output_file, status_text, progress_bar, window):
    """Run the ingestion in a separate thread to keep GUI responsive."""
    try:
        print(f"Starting ingestion process...")
        print(f"Folder: {folder_path}")
        print(f"Output: {output_file}")
        
        # Import here to avoid issues during GUI setup
        try:
            print("Importing gitingest module...")
            from gitingest import ingest
            print("‚úì Gitingest imported successfully")
        except ImportError as e:
            error_msg = f"Failed to import gitingest: {e}\n\nPlease install: pip install gitingest"
            print(f"ERROR: {error_msg}")
            status_text.insert(tk.END, f"‚ùå {error_msg}\n")
            status_text.see(tk.END)
            messagebox.showerror("Import Error", error_msg)
            return
        
        status_text.insert(tk.END, f"Processing: {folder_path}\n")
        status_text.insert(tk.END, f"Output: {output_file}\n\n")
        status_text.see(tk.END)
        window.update()
        
        # Run ingestion
        print("Running ingest function...")
        summary, tree, content = ingest(
            source=folder_path,
            output=output_file
        )
        print("‚úì Ingestion completed")
        
        # Update status
        status_text.insert(tk.END, "="*60 + "\n")
        status_text.insert(tk.END, "SUMMARY\n")
        status_text.insert(tk.END, "="*60 + "\n")
        status_text.insert(tk.END, summary + "\n\n")
        status_text.insert(tk.END, "‚úì Digest completed successfully!\n")
        status_text.insert(tk.END, f"‚úì Saved to: {output_file}\n")
        status_text.see(tk.END)
        
        progress_bar.stop()
        progress_bar['mode'] = 'determinate'
        progress_bar['value'] = 100
        
        messagebox.showinfo("Success", f"Digest created successfully!\n\nSaved to:\n{output_file}")
        
    except Exception as e:
        error_msg = f"Exception occurred: {type(e).__name__}: {str(e)}"
        print(f"\n{'='*60}")
        print(f"ERROR DETAILS:")
        print(f"{'='*60}")
        print(error_msg)
        print("\nFull Traceback:")
        traceback.print_exc()
        print(f"{'='*60}\n")
        
        progress_bar.stop()
        status_text.insert(tk.END, f"\n‚ùå Error: {str(e)}\n\n")
        status_text.insert(tk.END, "Full error details saved to: gitingest_debug.log\n")
        status_text.see(tk.END)
        messagebox.showerror("Error", f"Failed to create digest:\n\n{str(e)}\n\nCheck gitingest_debug.log for details")


class DigestApp:
    def __init__(self, root):
        print("Initializing DigestApp...")
        self.root = root
        self.root.title("Gitingest Folder Digester - DEBUG")
        self.root.geometry("700x550")
        self.root.resizable(True, True)
        
        # Variables
        self.folder_path = tk.StringVar()
        self.output_path = tk.StringVar(value="digest.txt")
        
        self.create_widgets()
        print("‚úì DigestApp initialized successfully")
    
    def create_widgets(self):
        # Title
        title_frame = tk.Frame(self.root, bg="#2c3e50", pady=15)
        title_frame.pack(fill=tk.X)
        
        title_label = tk.Label(
            title_frame,
            text="üìÅ Gitingest Folder Digester [DEBUG]",
            font=("Arial", 16, "bold"),
            bg="#2c3e50",
            fg="white"
        )
        title_label.pack()
        
        subtitle_label = tk.Label(
            title_frame,
            text="Convert any folder into a prompt-friendly text digest",
            font=("Arial", 9),
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        subtitle_label.pack()
        
        # Main content frame
        content_frame = tk.Frame(self.root, padx=20, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # Folder selection
        folder_frame = tk.LabelFrame(content_frame, text="Select Folder to Digest", padx=10, pady=10)
        folder_frame.pack(fill=tk.X, pady=(0, 10))
        
        folder_entry = tk.Entry(folder_frame, textvariable=self.folder_path, width=50)
        folder_entry.pack(side=tk.LEFT, padx=(0, 5), fill=tk.X, expand=True)
        
        browse_btn = tk.Button(
            folder_frame,
            text="Browse...",
            command=self.browse_folder,
            bg="#3498db",
            fg="white",
            padx=15
        )
        browse_btn.pack(side=tk.LEFT)
        
        # Output file selection
        output_frame = tk.LabelFrame(content_frame, text="Output File", padx=10, pady=10)
        output_frame.pack(fill=tk.X, pady=(0, 10))
        
        output_entry = tk.Entry(output_frame, textvariable=self.output_path, width=50)
        output_entry.pack(side=tk.LEFT, padx=(0, 5), fill=tk.X, expand=True)
        
        save_btn = tk.Button(
            output_frame,
            text="Save As...",
            command=self.browse_output,
            bg="#3498db",
            fg="white",
            padx=15
        )
        save_btn.pack(side=tk.LEFT)
        
        # Process button
        self.process_btn = tk.Button(
            content_frame,
            text="üöÄ Create Digest",
            command=self.process_folder,
            bg="#27ae60",
            fg="white",
            font=("Arial", 12, "bold"),
            padx=20,
            pady=10
        )
        self.process_btn.pack(pady=10)
        
        # Progress bar
        self.progress = ttk.Progressbar(
            content_frame,
            mode='indeterminate',
            length=300
        )
        self.progress.pack(pady=(0, 10))
        
        # Status text area
        status_frame = tk.LabelFrame(content_frame, text="Status", padx=10, pady=10)
        status_frame.pack(fill=tk.BOTH, expand=True)
        
        self.status_text = scrolledtext.ScrolledText(
            status_frame,
            height=10,
            wrap=tk.WORD,
            font=("Consolas", 9)
        )
        self.status_text.pack(fill=tk.BOTH, expand=True)
        self.status_text.insert(tk.END, "DEBUG MODE - Errors logged to gitingest_debug.log\n\n")
        self.status_text.insert(tk.END, "Ready to process a folder.\n\n")
        self.status_text.insert(tk.END, "Instructions:\n")
        self.status_text.insert(tk.END, "1. Click 'Browse...' to select a folder\n")
        self.status_text.insert(tk.END, "2. Choose output file location (optional)\n")
        self.status_text.insert(tk.END, "3. Click 'Create Digest' to start\n")
    
    def browse_folder(self):
        print("Opening folder browser...")
        folder = filedialog.askdirectory(title="Select Folder to Digest")
        if folder:
            print(f"Folder selected: {folder}")
            self.folder_path.set(folder)
            # Auto-set output path based on folder name
            folder_name = Path(folder).name
            default_output = str(Path(folder).parent / f"{folder_name}_digest.txt")
            self.output_path.set(default_output)
            print(f"Output path set to: {default_output}")
    
    def browse_output(self):
        print("Opening output file browser...")
        file = filedialog.asksaveasfilename(
            title="Save Digest As",
            defaultextension=".txt",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file:
            print(f"Output file selected: {file}")
            self.output_path.set(file)
    
    def process_folder(self):
        folder = self.folder_path.get()
        output = self.output_path.get()
        
        print(f"\nProcess button clicked")
        print(f"Folder: {folder}")
        print(f"Output: {output}")
        
        if not folder:
            print("ERROR: No folder selected")
            messagebox.showwarning("No Folder", "Please select a folder to digest.")
            return
        
        if not Path(folder).exists():
            print(f"ERROR: Folder does not exist: {folder}")
            messagebox.showerror("Invalid Folder", "The selected folder does not exist.")
            return
        
        if not output:
            print("ERROR: No output file specified")
            messagebox.showwarning("No Output", "Please specify an output file.")
            return
        
        # Clear status
        self.status_text.delete(1.0, tk.END)
        
        # Start progress bar
        self.progress['mode'] = 'indeterminate'
        self.progress['value'] = 0
        self.progress.start(10)
        
        # Disable button during processing
        self.process_btn.config(state=tk.DISABLED)
        
        print("Starting processing thread...")
        # Run in separate thread
        thread = threading.Thread(
            target=lambda: self._process_wrapper(folder, output)
        )
        thread.daemon = True
        thread.start()
    
    def _process_wrapper(self, folder, output):
        """Wrapper to re-enable button after processing."""
        try:
            run_ingest(folder, output, self.status_text, self.progress, self.root)
        finally:
            self.process_btn.config(state=tk.NORMAL)
            print("Processing thread completed")


def main():
    try:
        # Setup logging first
        setup_logging()
        
        print("Starting GitingestDigester...")
        print(f"Python version: {sys.version}")
        print(f"Working directory: {Path.cwd()}")
        
        # Check for required modules
        print("\nChecking required modules...")
        try:
            import tkinter
            print("‚úì tkinter available")
        except ImportError as e:
            print(f"‚úó tkinter not available: {e}")
            messagebox.showerror("Missing Module", "tkinter is not available. This is required for the GUI.")
            return
        
        try:
            import gitingest
            print(f"‚úì gitingest available (version: {getattr(gitingest, '__version__', 'unknown')})")
        except ImportError as e:
            print(f"‚úó gitingest not available: {e}")
            print("\nTo install gitingest, run: pip install gitingest")
        
        print("\nCreating GUI...")
        root = tk.Tk()
        app = DigestApp(root)
        print("‚úì GUI created successfully")
        print("\nStarting main loop...")
        root.mainloop()
        print("\nApplication closed normally")
        
    except Exception as e:
        error_msg = f"Fatal error during startup: {type(e).__name__}: {str(e)}"
        print(f"\n{'='*60}")
        print(f"FATAL ERROR:")
        print(f"{'='*60}")
        print(error_msg)
        print("\nFull Traceback:")
        traceback.print_exc()
        print(f"{'='*60}\n")
        
        # Try to show error dialog
        try:
            messagebox.showerror(
                "Fatal Error", 
                f"Application failed to start:\n\n{str(e)}\n\nCheck gitingest_debug.log for details"
            )
        except:
            pass


if __name__ == "__main__":
    main()